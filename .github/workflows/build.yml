# This workflow builds every branch of the repository daily at 16:30 UTC, one hour after ublue-os/nvidia builds.
# The images are also built after pushing changes or pull requests.
# The builds can also be triggered manually in the Actions tab thanks to workflow dispatch.
# Only the branch called `live` is published.


name: build-ublue
on: # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  schedule:
    - cron: "30 16 * * *"
  push:
    branches:
      - live
      - template
      - main
    paths-ignore: # don't rebuild if only documentation has changed
      - "**.md"
  pull_request:
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: krokas
  IMAGE_DESCRIPTION: "A custom Fedora Silverblue image for personal use"
  IMAGE_MAJOR_VERSION: 39
  BASE_IMAGE_REGISTRY: quay.io/fedora
  BASE_IMAGE_NAME: fedora-silverblue

# Only deploys the branch named "live". Ignores all other branches, to allow
# having "development" branches without interfering with GHCR image uploads.
jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false

    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      # Confirm that cosign.pub matches SIGNING_SECRET
      - uses: sigstore/cosign-installer@v3.4.0
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'

      - name: Check SIGNING_SECRET matches cosign.pub
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PASSWORD: ""
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        shell: bash
        run: |
          echo "Checking for difference between public key from SIGNING_SECRET and cosign.pub"
          delta=$(diff -u <(cosign public-key --key env://COSIGN_PRIVATE_KEY) cosign.pub)
          if [ -z "$delta" ]; then
            echo "cosign.pub matches SIGNING_SECRET"
          else
            echo "cosign.pub does not match SIGNING_SECRET"
            echo "$delta"
            exit 1
          fi

      - name: Install Podman (newer version)
        uses: gacts/install-podman@v1

      - name: Copy base image
        id: copy-base-image
        run: |
          skopeo --version
          skopeo copy --dest-creds ${{ github.actor }}:${{ github.token }} docker://$BASE_IMAGE_REGISTRY/$BASE_IMAGE_NAME:$IMAGE_MAJOR_VERSION docker://$IMAGE_REGISTRY/$BASE_IMAGE_NAME:$IMAGE_MAJOR_VERSION
          echo "BASE_IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_ENV

      - name: Get current version
        id: labels
        run: |
          ver=$(skopeo inspect docker://$BASE_IMAGE_REGISTRY/$BASE_IMAGE_NAME:$IMAGE_MAJOR_VERSION | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          MAJOR_VERSION="$(echo ${{ steps.labels.outputs.VERSION }} | cut -d . -f 1)"
          COMMIT_TAGS=()
          BUILD_TAGS=()
          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"

          # Using clever bash string templating, https://stackoverflow.com/q/40771781
          # don't make malformed tags if $MAJOR_VERSION is empty (base-image didn't include proper labels) --
          COMMIT_TAGS+=("pr-${{ github.event.number }}${MAJOR_VERSION:+-$MAJOR_VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}${MAJOR_VERSION:+-$MAJOR_VERSION}")

          BUILD_TAGS=("${MAJOR_VERSION}" "${MAJOR_VERSION:+$MAJOR_VERSION-}${TIMESTAMP}")
          # --

          BUILD_TAGS+=("latest")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Lowercase Image
        id: image_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_NAME }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        run: |
          podman build --pull=newer \
            --build-arg "BASE_IMAGE_URL=$BASE_IMAGE_REGISTRY/$BASE_IMAGE_NAME" \
            --build-arg "IMAGE_MAJOR_VERSION=$IMAGE_MAJOR_VERSION" \
            --build-arg "IMAGE_REGISTRY=${{ steps.registry_case.outputs.lowercase }}" \
            $(for t in ${{ steps.generate-tags.outputs.alias_tags }}; do echo --tag $IMAGE_NAME:$t; done) \
            .
          echo 

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.generate-tags.outputs.alias_tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
